M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
print(M, "chart")
print(M, "chart")
library(reprex)
install.packages("reprex")
print(M, "chart")
reprex()
library(reprex)
reprex()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
reprex()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
plot(M)
G <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height = 400))
print(G, "chart")
plot(G
)
G2 <- gvisGeoChart(Exports, locationvar = "Counbtry",
colorvar = "Profit", options = list(width = 600, height =400, region ="France"))
G2 <- gvisGeoChart(Exports, locationvar = "Counbtry",
colorvar = "Profit", options = list(width = 600, height =400, regions ="France"))
G2 <- gvisGeoChart(Exports, locationvar = "Counbtry",
colorvar = "Profit", options = list(width = 600, height =400))
G2 <- gvisGeoChart(Exports, locationvar = "Counbtry",
colorvar = "Profit", options = list(width = 600, height = 400))
G <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height = 400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height = 400, region = "France"))
plot(G2)
G2 <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height = 400, region = "Europe"))
plot(G2)
T1 <- gvisTable(Exports, options = list(width = 200, height = 270))
GT <- gvisMerge(G, T1, horizontal = FALSE)
plot(GT)
G <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height =400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width =600, height =400, region = "150"))
print(G2, "chart")
df <- data.frame(label = c("US", "GB", "BR"), val1 = c(1,3,4), val2 = c(23,12,32))
Line <- gvisLineChart(df, xvar = "label", yvar = c("val1", "val2"),
options = list(title = "Hello World", legend = "bottom",
titleTextStyle = "{color: 'red', fontSize:18}",
vAxis = "{gridlines:{color:'red', count:3}}",
hAxis = "{title: 'My Label', titleTextStyle:{colr:'blue'}}",
series = "[{color:'green', targetAxisIndex:0},
{color:'blue', targetAxisIndex:1}]",
vAxes = "[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType = "function", width = 500, height = 300
)
)
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit", options = list(width = 200, height = 100))
T1 <- gvisTable(Exports, options = list(width = 200, height = 270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 400, height =370))
GT <- gvisMerge(G, T1, horizontal = FALSE)
GTM <- gvisMerge(GT, M, horizontal = TRUE, tableOptions = "bgcolor = \"#CCCCCC\" cellspacing = 10")
plot(GTM)
plot(GTM)
clear
install.packages("plotly")
library(plotly)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
mtcars
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = "wt", y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(cyl))
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(mtcars$cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = as.factor(cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = as.factor(mtcars$cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(mtcars$cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(mtcars$disp))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = mtcars$disp)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
?plot_ly
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = wt, y = mpg, mode = "markers", color = as.factor(cyl), size = hp)
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl), size = ~hp)
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(cyl), size = ~hp)
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl), size = hp)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers", color = as.factor(mtcars$cyl))
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = ~wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = ~wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers")
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl))
data("airmiles")
airmiles
data("EuStockMarkets")
head(EuStockMarkets)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = time, y = price, color = index)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(mtcars$cyl))
library(plotly)
data(mtcars)
plot_ly(mtcars, x = m~wt, y = mpg, mode = "markers", color = ~disp)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~wt, y = mpg, mode = "markers", color = ~disp)
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(mtcars$cyl), size = hp)
library(plotly)
data(mtcars)
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(mtcars$cyl), size = ~hp)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = Pop, text = hover, locations = State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = hover, locations = State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = state_pop$Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop[pop]
state_pop[population]
state_pop[,2]
state_pop[State]
str(state_pop)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = Pop, text = hover, locations = State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frome
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop
# Create data frome
state_pop <- data.frame(State= state.abb, Pop= as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
str(state_pop)
# Create data frome
state_pop <- data.frame(State= state.abb, Pop= as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
map_opitons <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
# Create data frome
state_pop <- data.frame(State= state.abb, Pop= as.vector(state.x77[,1]))
# Create hover texgt
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set ip some mapping options
map_options <- list(scope = 'usa',
projection = list(type ='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z = ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
knitr::opts_chunk$set(echo = FALSE)
head(mtcars)
install.packages("leaflet")
library(leaflet)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
set.seed(2019-09-05)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
volcano
head(volcano)
knitr::opts_chunk$set(echo = TRUE)
volcanourl <- "https://www.ngdc.noaa.gov/nndc/struts/results?type_0=Exact&query_0=$HAZ_EVENT_ID&t=102557&s=50&d=54&dfn=volerup.txt"
if(!file.exists("volcano.txt")){
download.file(volcanourl, "volcano.txt", method = "curl")
}
volcanos <- read.csv(volcano.txt, sep = "")
volcanos <- read.csv("volcano.txt", sep = "")
head(volcanos)
volcanos$Latitude
volcanos <- read.csv("volcano.txt", sep = ",")
volcanos$Latitude
volcanos <- read.csv("volcano.txt", sep = " ")
volcanos <- read.csv("volcano.txt", sep = " ")
volcanos <- read.csv("volcano.txt")
volcanos$Latitude
volcanos <- read.csv("volcano.txt", sep = "")
volcanos$Latitude
setwd
setwd("/Users/leouev/Desktop/OneDrive/Coursera/R_Programing/developing data products/project1")
volcanos <- read.csv("volcano.csv", sep = ",")
volcanos <- read.csv("volcano.csv", sep = ",")
volcanos$Latitude
volcanos <- read.csv("volcano.csv", sep = ",")
volcanos$Latitude
Charizard <- makeIcon(
iconUrl = "https://cdn.bulbagarden.net/upload/7/7e/006Charizard.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
CharizardLatLong <- data.frame(
lat = volcanos$Latitude..dd.,
lng = volcanos$Longitude..dd.
)
head(CharizardLatLong)
library(leaflet)
volcanos <- read.csv("volcano.csv", sep = ",")
volcanos$Latitude
Charizard <- makeIcon(
iconUrl = "https://cdn.bulbagarden.net/upload/7/7e/006Charizard.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
CharizardSites <- "https://bulbapedia.bulbagarden.net/wiki/Charizard_(Pok%C3%A9mon)"
CharizardLatLong <- data.frame(
lat = volcanos$Latitude..dd.,
lng = volcanos$Longitude..dd.
)
CharizardLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = Charizard, popup = CharizardSites )
library(leaflet)
volcanos <- read.csv("volcano.csv", sep = ",")
volcanos$Latitude
Charizard <- makeIcon(
iconUrl = "https://cdn.bulbagarden.net/upload/7/7e/006Charizard.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
CharizardSites <- "https://bulbapedia.bulbagarden.net/wiki/Charizard_(Pok%C3%A9mon)"
CharizardLatLong <- data.frame(
lat = volcanos$Latitude..dd.,
lng = volcanos$Longitude..dd.
)
CharizardLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = Charizard, popup = "Charizard" )
library(leaflet)
volcanos <- read.csv("volcano.csv", sep = ",")
Charizard <- makeIcon(
iconUrl = "https://cdn.bulbagarden.net/upload/7/7e/006Charizard.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
CharizardLatLong <- data.frame(
lat = volcanos$Latitude..dd.,
lng = volcanos$Longitude..dd.
)
CharizardLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = Charizard, popup = "Charizard" )
